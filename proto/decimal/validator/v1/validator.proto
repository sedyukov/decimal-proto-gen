syntax = "proto3";
package decimal.validator.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "cosmos_proto/cosmos.proto";
import "tendermint/types/types.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/validator/types";

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
message Validator {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_stringer) = true;
  option (gogoproto.goproto_getters) = false;

  // operator_address defines the address of the validator's operator; bech encoded in JSON.
  string operator_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // consensus_pubkey is the consensus public key of the validator, as a
  // Protobuf Any.
  google.protobuf.Any consensus_pubkey = 2 [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
  // jailed defined whether the validator has been jailed from bonded status or
  // not.
  bool jailed = 3;
  // status is the validator status (bonded/unbonding/unbonded).
  BondStatus status = 4;
  // tokens define the delegated tokens (incl. self-delegation).
  string tokens = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // delegator_shares defines total shares issued to a validator's delegators.
  string delegator_shares = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // description defines the description terms for the validator.
  Description description = 7 [ (gogoproto.nullable) = false ];
  // unbonding_height defines, if unbonding, the height at which this validator
  // has begun unbonding.
  int64 unbonding_height = 8;
  // unbonding_time defines, if unbonding, the min time for the validator to
  // complete unbonding.
  google.protobuf.Timestamp unbonding_time = 9 [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
  // commission defines the commission parameters.
  Commission commission = 10 [ (gogoproto.nullable) = false ];
  // min_self_delegation is the validator's self declared minimum self
  // delegation.
  string min_self_delegation = 11 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // total_rewards is the pool of all collected rewards.
  string total_rewards = 12 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // reward_address defines the address of the account for withdrawing rewards;
  // bech encoded in JSON.
  string reward_address = 13 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // online is true if the validator participates in the consensus.
  bool online = 14;
}

// ValAddresses defines a repeated set of validator addresses.
message ValAddresses {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = true;

  repeated string addresses = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// BondStatus is the status of a validator.
enum BondStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // UNSPECIFIED defines an invalid validator status.
  BOND_STATUS_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "Unspecified" ];
  // UNBONDED defines a validator that is not bonded.
  BOND_STATUS_UNBONDED = 1 [ (gogoproto.enumvalue_customname) = "Unbonded" ];
  // UNBONDING defines a validator that is unbonding.
  BOND_STATUS_UNBONDING = 2 [ (gogoproto.enumvalue_customname) = "Unbonding" ];
  // BONDED defines a validator that is bonded.
  BOND_STATUS_BONDED = 3 [ (gogoproto.enumvalue_customname) = "Bonded" ];
}

// CommissionRates defines the initial commission rates to be used for creating
// a validator.
message CommissionRates {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // rate is the commission rate charged to delegators, as a fraction.
  string rate = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // max_rate defines the maximum commission rate which validator can ever
  // charge, as a fraction.
  string max_rate = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // max_change_rate defines the maximum daily increase of the validator
  // commission, as a fraction.
  string max_change_rate = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// Commission defines commission parameters for a given validator.
message Commission {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // commission_rates defines the initial commission rates to be used for
  // creating a validator.
  CommissionRates commission_rates = 1 [ (gogoproto.embed) = true, (gogoproto.nullable) = false ];
  // update_time is the last time the commission rate was changed.
  google.protobuf.Timestamp update_time = 2 [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
}

// Description defines a validator description.
message Description {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // moniker defines a human-readable name for the validator.
  string moniker = 1;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 2;
  // website defines an optional website link.
  string website = 3;
  // security_contact defines an optional email for security contact.
  string security_contact = 4;
  // details define other optional details.
  string details = 5;
}

// HistoricalInfo contains header and validator information for a given block.
// It is stored as part of validator module's state, which persists the `n` most
// recent HistoricalInfo
// (`n` is set by the validator module's `historical_entries` parameter).
message HistoricalInfo {
  tendermint.types.Header header = 1 [ (gogoproto.nullable) = false ];
  repeated Validator valset = 2 [ (gogoproto.nullable) = false ];
}

// Pool is used for tracking bonded and not-bonded token supply of the bond
// denomination.
message Pool {
  option (gogoproto.description) = true;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  string not_bonded_tokens = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "not_bonded_tokens"
  ];
  string bonded_tokens = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "bonded_tokens"
  ];
}
