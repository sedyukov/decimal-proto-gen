syntax = "proto3";
package decimal.validator.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/validator/types";

// NFT contains necessary info related to NFT stake.
message NFT {
  // denom defines NFT collection name.
  string denom = 1;
  // token_id defines NFT token ID.
  string token_id = 2 [(gogoproto.customname) = "TokenID"];
  // sub_token_ids defines list of NFT subtoken IDs.
  repeated int64 sub_token_ids = 3 [(gogoproto.customname) = "SubTokenIDs"];
}

// Delegation represents the bond with tokens held by an account. It is
// owned by one delegator, and is associated with the voting power of one
// validator.
message Delegation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  // delegator_address is the bech32-encoded address of the delegator.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator_address is the bech32-encoded address of the validator.
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // stake defines amount of coins delegated. For NFT case it contains total
  // reserve of delegated NFTs instead of actually delegated coins.
  cosmos.base.v1beta1.Coin stake = 3 [(gogoproto.nullable) = false];
  // is_nft is true for NFT delegations.
  bool is_nft = 4 [(gogoproto.customname) = "IsNFT"];

  // nft_token_id defines NFT token ID for NFT delegation.
  string nft_token_id = 5 [(gogoproto.customname) = "NFTTokenID"];
  // nft_quantity defines quantity of delegated NFT tokens for NFT delegation.
  uint64 nft_quantity = 6 [(gogoproto.customname) = "NFTQuantity"];
}

// UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single validator in an time-ordered list.
message UnbondingDelegation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  // delegator_address is the bech32-encoded address of the delegator.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator_address is the bech32-encoded address of the validator.
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // entries are the unbonding delegation entries.
  repeated UnbondingDelegationEntry entries = 3 [(gogoproto.nullable) = false];
}

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
message UnbondingDelegationEntry {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // creation_height is the height which the unbonding took place.
  int64 creation_height = 1;
  // completion_time is the unix time for unbonding completion.
  google.protobuf.Timestamp completion_time = 2
      [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // stake defines amount of coins unbonding. For NFT case it contains total
  // reserve of delegated NFTs instead of actually delegated coins.
  cosmos.base.v1beta1.Coin stake = 3 [(gogoproto.nullable) = false];
  // is_nft is true for NFT delegations.
  bool is_nft = 4 [(gogoproto.customname) = "IsNFT"];

  // nft_token_id defines NFT token ID for NFT delegation.
  string nft_token_id = 5 [(gogoproto.customname) = "NFTTokenID"];
  // nft_quantity defines quantity of delegated NFT tokens for NFT delegation.
  uint64 nft_quantity = 6 [(gogoproto.customname) = "NFTQuantity"];
}

// Redelegation contains the list of a particular delegator's redelegating bonds
// from a particular source validator to a particular destination validator.
message Redelegation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  // delegator_address is the bech32-encoded address of the delegator.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator_src_address is the validator redelegation source operator
  // address.
  string validator_src_address = 2
      [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // validator_dst_address is the validator redelegation destination operator
  // address.
  string validator_dst_address = 3
      [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // entries are the redelegation entries.
  repeated RedelegationEntry entries = 4 [(gogoproto.nullable) = false];
}

// RedelegationEntry defines a redelegation object with relevant metadata.
message RedelegationEntry {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // creation_height  defines the height which the redelegation took place.
  int64 creation_height = 1;
  // completion_time defines the unix time for redelegation completion.
  google.protobuf.Timestamp completion_time = 2
      [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // stake defines amount of coins redelegating. For NFT case it contains total
  // reserve of delegated NFTs instead of actually delegated coins.
  cosmos.base.v1beta1.Coin stake = 3 [(gogoproto.nullable) = false];
  // is_nft is true for NFT delegations.
  bool is_nft = 4 [(gogoproto.customname) = "IsNFT"];

  // nft_token_id defines NFT token ID for NFT delegation.
  string nft_token_id = 5 [(gogoproto.customname) = "NFTTokenID"];
  // nft_quantity defines quantity of delegated NFT tokens for NFT delegation.
  uint64 nft_quantity = 6 [(gogoproto.customname) = "NFTQuantity"];
}

// DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
message DelegationResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_stringer) = true;

  Delegation delegation = 1 [(gogoproto.nullable) = false];

  cosmos.base.v1beta1.Coin balance = 2 [(gogoproto.nullable) = false];
}

// RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
message RedelegationEntryResponse {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  RedelegationEntry redelegation_entry = 1 [(gogoproto.nullable) = false];
  string balance = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// RedelegationResponse is equivalent to a Redelegation except that its entries
// contain a balance in addition to shares which is more suitable for client
// responses.
message RedelegationResponse {
  option (gogoproto.equal) = false;

  Redelegation redelegation = 1 [(gogoproto.nullable) = false];
  repeated RedelegationEntryResponse entries = 2 [(gogoproto.nullable) = false];
}