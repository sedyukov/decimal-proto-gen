syntax = "proto3";
package decimal.swap.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";

import "decimal/swap/v1/swap.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/swap/types";

// Query defines the gRPC querier service.
service Query {
  // Retrieves existing swap by hashed secret.
  rpc Swap(QuerySwapRequest) returns (QuerySwapResponse) {
    option (google.api.http).get = "/decimal/swap/v1/swap/{hashedSecret}";
  }

  // Retrieves active swaps.
  rpc ActiveSwaps(QueryActiveSwapsRequest) returns (QueryActiveSwapsResponse) {
    option (google.api.http).get = "/decimal/swap/v1/swaps";
  }

  // Retrieves amount of coins stored in swap pool.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/decimal/swap/v1/pool";
  }
}

message QuerySwapRequest {
  string hashedSecret = 1;
}

message QuerySwapResponse {
  Swap swap = 1 [ (gogoproto.nullable) = false ];
}

message QueryActiveSwapsRequest {}

message QueryActiveSwapsResponse {
  repeated Swap swaps = 1 [ (gogoproto.nullable) = false ];
}

message QueryPoolRequest {}

message QueryPoolResponse {
  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}
