syntax = "proto3";
package decimal.nft.v1;

import "gogoproto/gogo.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/nft/types";

// Msg defines the nft Msg service.
service Msg {
  // MintToken defines message for creating new NFT token or minting additional NFT sub-tokens.
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);

  // UpdateToken defines message for NFT token modifying.
  rpc UpdateToken(MsgUpdateToken) returns (MsgUpdateTokenResponse);

  // UpdateReserve defines message for NFT token's reserve updating.
  rpc UpdateReserve(MsgUpdateReserve) returns (MsgUpdateReserveResponse);

  // SendToken defines message for transferring NFT sub-tokens.
  rpc SendToken(MsgSendToken) returns (MsgSendTokenResponse);

  // BurnToken defines message for burning NFT sub-tokens.
  rpc BurnToken(MsgBurnToken) returns (MsgBurnTokenResponse);
}

// MsgMintToken defines a SDK message for creating a new NFT token or mint additional NFT sub-tokens.
message MsgMintToken {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string denom = 2;
  string token_id = 3 [ (gogoproto.customname) = "TokenID" ];
  string token_uri = 4 [ (gogoproto.customname) = "TokenURI" ];
  bool allow_mint = 5;
  string recipient = 6 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint32 quantity = 7;
  cosmos.base.v1beta1.Coin reserve = 8 [ (gogoproto.nullable) = false ];
}

// MsgMintTokenResponse defines the Msg/MintToken response type.
message MsgMintTokenResponse {}

// MsgUpdateToken defines a SDK message for modifying existing NFT token.
message MsgUpdateToken {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [ (gogoproto.customname) = "TokenID" ];
  string token_uri = 3 [ (gogoproto.customname) = "TokenURI" ];
}

// MsgUpdateTokenResponse defines the Msg/UpdateToken response type.
message MsgUpdateTokenResponse {}

// MsgUpdateReserve defines a SDK message for modifying existing NFT sub-token's reserve.
message MsgUpdateReserve {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [ (gogoproto.customname) = "TokenID" ];
  repeated uint32 sub_token_ids = 4 [ (gogoproto.customname) = "SubTokenIDs" ];
  cosmos.base.v1beta1.Coin reserve = 5 [ (gogoproto.nullable) = false ];
}

// MsgUpdateReserveResponse defines the Msg/UpdateReserve response type.
message MsgUpdateReserveResponse {}

// MsgSendToken defines a SDK message for transferring NFT sub-token.
message MsgSendToken {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [ (gogoproto.customname) = "TokenID" ];
  repeated uint32 sub_token_ids = 3 [ (gogoproto.customname) = "SubTokenIDs" ];
  string recipient = 4 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSendTokenResponse defines the Msg/SendToken response type.
message MsgSendTokenResponse {}

// MsgBurnToken defines a SDK message for burning NFT sub-token.
message MsgBurnToken {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [ (gogoproto.customname) = "TokenID" ];
  repeated uint32 sub_token_ids = 3 [ (gogoproto.customname) = "SubTokenIDs" ];
}

// MsgBurnTokenResponse defines the Msg/BurnToken response type.
message MsgBurnTokenResponse {}
